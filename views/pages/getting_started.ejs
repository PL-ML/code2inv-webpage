<!DOCTYPE html>
<html>

<head>
	<title>Code2Inv | Getting Started</title>
	<%- include('../partial/includes.ejs') %>
	<script src="js/getting_started.js"></script>
	<link rel="stylesheet" type="text/css" media="screen" href="css/getting_started.css" />
</head>

<body>
	<%- include('../partial/navbar.ejs') %>

	<div class="container">
        <div class="row">
            <div class="col-lg-12">
                <h1>Getting Started with Code2Inv</h1>
                <hr>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <h3>With Docker (the easy way)</h3>
                <p>
                    This is the easiest way to get started with Code2Inv.
                    All you need is a machine with <a href="https://www.docker.com/"
                    target="_blank">Docker</a> installed and you are set!
                </p>
                <p>
                    Once you have Docker installed, you simply need to pull the Docker image
                    from our Dockerhub repository. Fair warning, though, the image is a bit big.
                </p>
                <pre>$ docker pull code2inv/code2inv</pre>
                <p>
                    Once the download is complete, you can run it as follows:
                </p>
                <pre>$ docker run -it --name code2inv code2inv/code2inv</pre>
                <p>
                    This should run the image in a Docker container called code2inv. You can now
                    play around with Code2Inv! Refer to the
                    <a href="https://github.com/PL-ML/code2inv/blob/master/README.md#experiments"
                    target="_blank">Experiments section</a>
                    in our README (available in our GitHub Repository) to know how to run Code2Inv.
                </p>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <h3>Building From Source (the not-so-easy way)</h3>
                <p>
                    You can visit our GitHub repository <a href="https://github.com/PL-ML/code2inv"
                    target="_blank">here</a>. All the instructions for installing Code2Inv and its
                    front-ends are in the README.md file.
                    Follow those instructions and you should be done with installing Code2Inv in no time!
                </p>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <h3>Customizing Code2Inv</h3>
                <p>
                    Code2Inv takes as input a graph file, a verification condition file and a specification file.
                    We have included example inputs in our GitHub repository in the
                    <a href="https://github.com/PL-ML/code2inv/tree/master/benchmarks" target="_blank">
                        benchmarks directory</a>.
                </p>
                <p>
                    The graph file is a file containing a single JSON object, with a list of nodes and the control
                    flows between these nodes. These nodes include statements and expressions with details of these
                    statements, including the variables, constants and operators used. This graph is indicative of
                    the structural representation of the program. We include details about constructing the graph
                    file <a href="https://github.com/PL-ML/code2inv/blob/master/customizing.md#the-graph-file"
                    target="_blank">here</a> in our GitHub repository.
                </p>
                <p>
                    The verification condition file is a file containing the verification conditions used to check
                    the correctness of the predicted invariant candidate. This may be in any format provided that
                    the checker is able to process them and extract the counter examples when needed. We include
                    further details about the verification condition file
                    <a href="https://github.com/PL-ML/code2inv/blob/master/customizing.md#the-verification-condition-file"
                    target="_blank">here</a> in our GitHub repository.
                </p>
                <p>
                    The specification file is a file which contains the relative path to the grammar file, the name
                    of the checker module and the variable format which occurs in both the graph and the
                    verification condition files. The grammar file contains the grammar used to construct the invariant.
                    The checker module is used for checking the proposed invariant candidate against the verification
                    condition file and returning any counter examples. The variable format is to be specified as
                    <code>ssa</code> only if the SSA format of variables is used in the input graph and the
                    verification condition file. We include more details about the specification file
                    <a href="https://github.com/PL-ML/code2inv/blob/master/customizing.md#the-specification-file"
                    target="_blank">here</a> in our GitHub repository.
                    
                </p>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <h3>Running Code2Inv</h3>
                <p>
                    We refer to the Code2Inv repository root as <code>code2inv-repo</code>. Running Code2Inv is straightforward.
                    The script for running Code2Inv called <code>run_solver_file.sh</code> is located in the
                    <code>code2inv-repo/code2inv/prog_generator</code> directory. It takes the three inputs as mentioned
                    earlier as well as an option to specify the output file. We show running Code2Inv on one of the C
                    programs we provide in the benchmarks directory.
                </p>
                <pre>$ cd code2inv-repo/code2inv/prog_generator<br>$ ./run_solver_file.sh ../../benchmarks/C_instances/c_graph/101.c.json ../../benchmarks/C_instances/c_smt2/101.c.smt specs/c_spec</pre>
                
            </div>
        </div>
        
    </div>
</body>
</html>